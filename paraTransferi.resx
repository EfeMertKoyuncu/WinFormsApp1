<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFANAABAAgAEZCcEK3pFIG6NYEGvnHVa26WC
        afSqiXH+qoly/qaDavOcdVrbjWBBrnpFIG5kJwMrQQIABFENAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFcWAABIBAAEbDMMOYtdPZmqiHHgu5+N+7ic
        iP+wkHr/rIt1/554Xf+cdVr/on1j/62Mdf+4nIn/u5+N+6qIceCLXT2ZbDMMOUgEAARXFgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEkJAAB3QA0AYiUAG4RUMouujnfqvaKQ/6N+
        ZP+DUzD/fEkk/31KJf+Yb1P/lWtO/5FmSP+DUS//gE0q/3pGIP+DUzD/o35k/72ikP+ujnfrhFQyi2Il
        ABt4QA0ARwkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABeHgAAuJxmAGwyCjeYb1LDvqST/qN+
        Zf96RR//bzYO/282Df+IWDf/pYFp/6B6YP+gel//nXVb/6aDa/+gemD/kmdJ/282Df9vNg7/eUUf/6N+
        Zf++pJP+mG9TxGwyCje5nWgAXh8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAZioAAJ54WwBwNw9Don5k2r2j
        kP+IWTf/bzcO/3E4EP9xORH/cDgQ/3xIJP+OYUL/hVUz/39NKf+GVzX/k2lL/554Xf9/TCj/cDgQ/3E5
        Ef9xOBD/bzcO/4hZN/+9o5D/on5k2m83D0OdeFoAZikAAAAAAAAAAAAAAAAAAGwzCQB2QBoAbDMJOKJ+
        ZNq6n4v/fUol/283Dv9xORH/cTkR/3E5Ef9xORH/cDgQ/281Df9uNQz/bzcP/282Dv9xOhL/fEkl/3E6
        Ev9xORH/cTkR/3E5Ef9xORH/bzcO/31JJf+6nov/on5k2mwzCTh3QRoAazIJAAAAAAAAAAAAbTQMAGIl
        ABuYb1LDvaKQ/31KJf9wNw//cTkR/3E5Ef9xORH/cDgQ/3A4EP9/Tir/nHVa/7WXgf/CqJP/wqiT/7WX
        gP+cdVn/f00q/3A4EP9wOBD/cTkR/3E5Ef9xORH/cDcP/31JJf+9opD/mG9Sw2IlABxtNAsAAAAAAG83
        DgAyAAADhFQxi76kkv+IWTf/bzcO/3E5Ef9xORH/cTkR/3A3Dv9+Syj/tJZ//+XVw//56tL//ezN//3q
        yf/96sn//ezN//nq0v/m1cP/tJaA/35LKP9wNw7/cTkR/3E5Ef9xORH/bzcO/4hZN/++pZP/hFQyizEA
        AANvNg4AcjsTAGwzCTmujnfqo39l/283Dv9xORH/cTkR/3E5Ef9wNw//jmJC/9zJuP/87NH//ObA//rj
        uv/647r/+uO6//rjuv/647r/+uO6//zmwP/87NH/3Mm4/45iQ/9wNw//cTkR/3E5Ef9xORH/bzcO/6N+
        Zf+ujnfqbDMJOXI7FAAdAAADi109mL2ikP96RR//cDgQ/3E5Ef9xORH/cDcO/45iQv/n18b//+zL//zl
        vf/85r7//Oa+//zmvv/85r7//Oa+//zmvv/85r7//Oa+//zlvf//7cv/6NjH/45iQ/9wNw//cTkR/3E5
        Ef9wOBD/ekUf/72ikP+LXT2ZHwAAA2QnACuqiHDfo35l/282Dv9xORH/cTkR/3A4D/9+Syj/3Mq4//fj
        wf/Xt4//07OL/9Ozi//Ts4v/07OL/9Ozi//Ts4v/07OL/9Ozi//Ts4v/07OL/9Kyif/mzq3/3Mq4/35L
        KP9wOA//cTkR/3E5Ef9vNg7/o35l/6qIcd9kJwArekUgbrufjPuEUzH/cDcP/3E5Ef9xORH/cDgQ/7SW
        gP/97tP/48ef/35KIv9zPBT/dD0V/3M8FP90PRX/dD0V/3M8FP90PRX/czwU/3M8FP90PRX/cTkR/6h/
        WP/87dL/tJaA/3A4EP9xORH/cTkR/3A4D/+EUzD/u5+N+3pFIG6NYEGuuZ2K/3Q+F/9xORH/cTkR/3A4
        D/9/TSr/5dXD//znwf/x2LD/xqN7/7yXb/+7lm7/wJx0/7uWbv+9l2//wJtz/7qVbf++mXH/v5py/7qU
        bP++mnL/2LqS//znwf/l1cP/gE0q/3A4D/9xORH/cTkR/3Q+Fv+4nYn/jWBBrpx1WtqujXf/cDcP/3E5
        Ef9xORH/bzYN/5x1Wf/46tH/+uO6//rkvP/75b3/tI5m/6N4UP/s06v/ondP/7WQaP/kyqP/lmdA/82s
        hP/Vto7/lWY+/+DEnP/957//+uO6//nq0f+cdVr/bzYN/3E5Ef9xORH/cDcP/62Nd/+cdVrapoNq86N+
        Zf9vNg3/cTkR/3E5Ef9vNg7/tZeA//3szf/647r/+uO7//niuv+ccEj/hlQs/+XJof+FUir/nXJM/9q+
        l/90Pxf/vZdv/8akfP9zPBX/1baO//zmvv/647r//ezN/7WXgP9vNg7/cTkR/3E5Ef9vNg3/o35k/6aD
        avOriXL+nXZb/282Df9xORH/cTkR/3A4EP/CqJP//evJ//rjuv/647v/+eK6/55xSv+IVi7/5cmi/4dU
        LP+fdE3/2r6X/3ZBGf++mHD/x6V9/3U+F//Wt4///Oa+//rjuv/968n/wqiT/3A4EP9xORH/cTkR/282
        Df+dd1v/q4ly/quJcv6ddlv/bzYN/3E5Ef9xORH/cDgQ/8Kok//968n/+uO6//rju//54rr/nXBI/4dU
        LP/lyaH/hlIq/55yTP/avpf/dT8X/72YcP/HpHz/dDwV/9W2j//85r7/+uO6//3ryf/CqJP/cDgQ/3E5
        Ef9xORH/bzYN/513W/+riXL+poNq86N+Zf9vNg3/cTkR/3E5Ef9vNg7/tZaA//3szf/647r/+uS8//vl
        vf+uhl7/m25G/+vRqf+abET/r4hh/+LIoP+MXDX/yad//9Kyiv+LWjL/3sGZ//3nv//647r//ezN/7WX
        gP9vNg7/cTkR/3E5Ef9vNg3/o35k/6aDavOcdVraro13/3A3D/9xORH/cTkR/282Df+cdVn/+OrR//vk
        u//y2rL/zayE/8CcdP+/mXH/x6V9/76Zcf/BnXX/x6R8/72Xb//EoHj/xaJ6/72Xb//Fonr/3cCY//rj
        u//56tH/nHVa/282Df9xORH/cTkR/3A3D/+tjXf/nHVa2o1gQa65nYr/dD4X/3E5Ef9xORH/cDgP/39N
        Kv/l1cP//ejB/+nOpv+HVS3/cDcP/3I6Ev9yOhL/cjsT/3I7E/9yOhL/cjsT/3I6Ev9yOhL/cTkR/3E5
        Ef+0jWX//ejB/+XVw/9/TSr/cDgP/3E5Ef9xORH/dD4W/7idif+NYEGuekUgbrufjfuEUzH/cDcP/3E5
        Ef9xORH/cDgQ/7SWf//87NH/+eK5/92/l/+ecUn/dT4W/283D/9xORH/cTkR/3E5Ef9xORH/cDgQ/283
        D/+CTyf/vJZu//DWrv/87dH/tJZ//3A4EP9xORH/cTkR/3A4D/+EUzD/up+N+3pFIG5kJwArqohw36N+
        Zf9vNg7/cTkR/3E5Ef9wOA//fkso/9vJuP/96sj//OW8//Xdtf/Kp3//jFsz/3E4EP9wOBD/cTkR/283
        D/94Qhr/p3xU/+PHn//75Lv//evJ/9vJuP9+Syf/cDgP/3E5Ef9xORH/bzYO/6N+Zf+qiHHfZCcAKx8A
        AAOLXTyYvaKQ/3pFIP9wOBD/cTkR/3E5Ef9vNg3/jV9A/+bWxf/96sj/+uO7//zlvf/s0qr/to5m/39K
        Iv9zOxP/lGU9/9Oyiv/44Lj//OW8//3qyP/m1sX/j2JD/3M7FP9xORH/cTkR/3A4EP96RR//vaOQ/4td
        PZkdAAADcjsTAGwzCTmujnfqo39l/283Dv9xORH/cDgQ/4JRLv+PY0T/lGpM/9vIt//87NH//ObA//vk
        vP/647v/3sCY/8uogP/x167//OW9//znwP/87NH/28m4/45hQv95RB7/kmhJ/3A4EP9xORH/bzcO/6N+
        Zf+ujXfqbDIJOXI7EwBwNw4AMgAAA4RUMou+pJL/iFk4/282Df+BUCz/o39l/5ZsTv+cdVn/g1Iv/7WX
        gP/l1ML/+OnR//3szf/+7Mv//+3M//3szv/56tH/5dTC/7SVfv9+Syf/gU8s/6B7YP+xk33/i108/3I6
        Ev+IWTf/vqST/4RUMosyAAADbzYOAAAAAABtNAsAYiUAG5hvUsO9o5H/fEgj/5pyVf+GVzX/h1c1/6B6
        X/+kgWf/kmdI/4dZOP+ifWP/tZeA/8Gnkv/BppH/tJV+/512W/+LXT3/f00p/4JRLv+Va03/l25R/62M
        df+LXTz/fksn/72ikP+Yb1LDYyUAG240CwAAAAAAAAAAAGs0CQB2QBoAbDIJOKJ+ZNm5nYr/kWZH/5lx
        Vf96RiD/g1Iv/6aCaf+qiHD/poNp/5tzV/+IWjj/hFQx/5ZtUP+RZUb/j2ND/6iFbf+lgmn/oXxh/5Rq
        TP+YcFP/gE4q/5hvU/+5nor/on5k2WwyCTh2QBoAbjMJAAAAAAAAAAAAAAAAAGYqAACdd1oAbzcPQ6J+
        ZNq9opD/j2ND/3E5EP+FVTL/pIBm/4tdPP+Va03/lm1Q/5dtUP+eeFz/pIBm/6aDav+Uakz/nXdb/62N
        dv+IWTj/lm1Q/3pFIP+HVzb/vqSS/6J+ZNpwNw9DnnZaAGYpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF8g
        AAC1l2MAbDIKN5hvUsO+pJL+o39l/3pFH/9xORH/dkAZ/5hvUv+bdFj/kmdJ/5NoSv+sjHX/rItz/4FP
        LP+IWjj/i149/282Dv94Qx3/on5k/76kkv6Yb1LDbDIKN7uiawBfHwAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAEYKAAB4QA0AYiUAG4RUMouujnfqvaKQ/6N+Zf+EUzD/dD4X/3E5Ef+DUS7/f0wo/6N+
        ZP+ed1z/eUUf/3Q9Fv+DUi//o35k/72ikP+ujnfqhFQyi2MlABt4QAwASAkAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABXFwAASAQABGwzDDiLXT2Zqohw4Lufjfu5nYr/ro53/6aC
        av+dd1z/oXxi/6WBaP+tjXb/uZ2K/7qfjPuqiHDgi109mWwzDDhIBAAEWBcAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUQ0AAEACAARkJwQrekUgbo1g
        Qa6ddlrapoJq86uJcv6riXL+poJq85x2WtqNYUGuekUgbmQnAytBAgAEUQ0AAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4AB//4AAH/8AAA/+AAAH/AAAA/gAAAHwAAAA4AAAAGAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAAcAA
        AAPgAAAH8AAAD/gAAB/8AAA//gAAf/+AAf8=
</value>
  </data>
</root>